{
  "Array: Cast a value as an array": {
    "prefix": [
      "&:cast a value as an array",
      "&:cast-array"
    ],
    "body": "const ${1:result} = ${value} => (Array.isArray(${value} ? ${value} : [${value}]));$0",
    "description": "Cast a value as an array"
  },
  "Array: Check if array is empty": {
    "prefix": [
      "&:check if array is empty",
      "&:empty-array"
    ],
    "body": "const ${1:result} = ${array} => Array.isArray(${array}) && ${array}.length;$0",
    "description": "Check if an array is empty"
  },
  "Array: Deep clone": {
    "prefix": [
      "&:clone an array",
      "&:clone-array"
    ],
    "body": "const ${1:result} = JSON.parse(JSON.stringify(${array}));$0",
    "description": "Deeply clone an array"
  },
  "Array: Find maximum item of an array": {
    "prefix": [
      "&:find maximum item of an array",
      "&:find-max-array"
    ],
    "body": "const ${1:result} = ${array} => Math.max(...${array});$0",
    "description": "Find the maximum item of an array"
  },
  "Array: Find minimum item of an array": {
    "prefix": [
      "&:find minimum item of an array",
      "&:find-min-array"
    ],
    "body": "const ${1:result} = ${array} => Math.min(...${array});$0",
    "description": "Find the minimum item of an array"
  },
  "Array: Remove duplicate values in an array": {
    "prefix": [
      "&:remove duplicate values in an array",
      "&:remove-duplicate-array"
    ],
    "body": "const ${result} = (${array}) => ${array}.filter((i) => ${array}.indexOf(i) === ${array}.lastIndexOf(i));$0",
    "description": "Remove duplicate values in an array"
  },
  "Array: Shallow clone": {
    "prefix": [
      "&:clone an array (shallow)",
      "&:shallow-clone-array"
    ],
    "body": "const ${1:result} = ${array} => [...${array}]$0",
    "description": "Shallow clone an array (nested objects/arrays not cloned)"
  },
  "Date: Convert date to yyyy mm dd": {
    "prefix": [
      "&:convert a date to yyyy-mm-dd",
      "&:convert-yyyy-mm-dd"
    ],
    "body": "const ${1:result} = ${date} => ${date}.toISOString().slice(0, 10);$0",
    "description": "Convert a date to YYYY-MM-DD format"
  },
  "Date: Get tomorrow date": {
    "prefix": [
      "&:get tomorrow date"
    ],
    "body": "const ${tomorrow} = new Date(new Date().valueOf() + 1000 * 60 * 60 * 24);$0",
    "description": "Get tomorrow's date"
  },
  "Date: Get yesterday date": {
    "prefix": [
      "&:get yesterday date"
    ],
    "body": "const ${yesterday} = new Date(new Date().valueOf() - 1000 * 60 * 60 * 24);$0",
    "description": "Get yesterday's date"
  }
}