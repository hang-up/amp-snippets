{"Array: Cast a value as an array":{"prefix":["&:cast a value as an array","&:cast-array"],"body":"const ${1:result} = ${value} => (Array.isArray(${value} ? ${value} : [${value}]));$0","description":"Cast a value as an array"},"Array: Check if array is empty":{"prefix":["&:check if array is empty","&:empty-array"],"body":"const ${1:result} = ${array} => Array.isArray(${array}) && ${array}.length;$0","description":"Check if an array is empty"},"Array: Deep clone":{"prefix":["&:clone an array","&:clone-array"],"body":"const ${1:result} = JSON.parse(JSON.stringify(${array}));$0","description":"Deeply clone an array"},"Array: Find maximum item of an array":{"prefix":["&:find maximum item of an array","&:find-max-array"],"body":"const ${1:result} = ${array} => Math.max(...${array});$0","description":"Find the maximum item of an array"},"Array: Find minimum item of an array":{"prefix":["&:find minimum item of an array","&:find-min-array"],"body":"const ${1:result} = ${array} => Math.min(...${array});$0","description":"Find the minimum item of an array"},"Array: Remove duplicate values in an array":{"prefix":["&:remove duplicate values in an array","&:remove-duplicate-array"],"body":"const ${result} = (${array}) => ${array}.filter((i) => ${array}.indexOf(i) === ${array}.lastIndexOf(i));$0","description":"Remove duplicate values in an array"},"Array: Shallow clone":{"prefix":["&:clone an array (shallow)","&:shallow-clone-array"],"body":"const ${1:result} = ${array} => [...${array}]$0","description":"Shallow clone an array (nested objects/arrays not cloned)"},"Date: Convert date to yyyy mm dd":{"prefix":["&:convert a date to yyyy-mm-dd","&:convert-yyyy-mm-dd"],"body":"const ${1:result} = ${date} => ${date}.toISOString().slice(0, 10);$0","description":"Convert a date to YYYY-MM-DD format"},"Date: Get tomorrow date":{"prefix":["&:get tomorrow date"],"body":"const ${tomorrow} = new Date(new Date().valueOf() + 1000 * 60 * 60 * 24);$0","description":"Get tomorrow's date"},"Date: Get yesterday date":{"prefix":["&:get yesterday date"],"body":"const ${yesterday} = new Date(new Date().valueOf() - 1000 * 60 * 60 * 24);$0","description":"Get yesterday's date"},"Functions: Compose functions from left to right":{"prefix":["&:compose functions from left to right","&:compose-left-right","&:pipe"],"body":"const pipe = (...funcs) => x => funcs.reduce((carry, current) => current(carry), x);$0","description":"Compose functions from left to right"},"Functions: Compose functions from right to left":{"prefix":["&:compose functions from right to left","&:compose-right-left","&:pipe"],"body":"const pipe = (...funcs) => x => funcs.reduceRight((carry, current) => current(carry), x);$0","description":"Compose functions from right to left"},"Functions: Create an empty function":{"prefix":["&:create an empty function","&:noop"],"body":"const noop = () => {}$0","description":"Create an empty function"},"Functions: Memoize a function":{"prefix":["&:memoize a function","&:store results of previous function calls and return the cached result","&:memoize"],"body":"\nconst memoized = (fn) => {\n  const cache = Object.create(null);\n  return (arg) =>\n    !cache[arg]\n      ? (() => {\n          cache[arg] = fn(arg);\n          return cache[arg];\n        })()\n      : cache[arg];\n};\n","description":"Memoize a function"}}